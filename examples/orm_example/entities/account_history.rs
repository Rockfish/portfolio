//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.12

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "account_history")]
pub struct Model {
    #[sea_orm(primary_key, unique)]
    pub id: i32,
    pub run_date: Option<Date>,
    #[sea_orm(column_type = "Text", nullable)]
    pub account: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub action: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub symbol: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub security_description: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub security_type: Option<String>,
    #[sea_orm(column_type = "Decimal(Some((10, 2)))", nullable)]
    pub exchange_quantity: Option<Decimal>,
    #[sea_orm(column_type = "Text", nullable)]
    pub exchange_currency: Option<String>,
    #[sea_orm(column_type = "Decimal(Some((10, 3)))", nullable)]
    pub quantity: Option<Decimal>,
    #[sea_orm(column_type = "Text", nullable)]
    pub currency: Option<String>,
    #[sea_orm(column_type = "Decimal(Some((10, 2)))", nullable)]
    pub price: Option<Decimal>,
    #[sea_orm(column_type = "Text", nullable)]
    pub exchange_rate: Option<String>,
    #[sea_orm(column_type = "Decimal(Some((10, 2)))", nullable)]
    pub commission: Option<Decimal>,
    #[sea_orm(column_type = "Decimal(Some((10, 2)))", nullable)]
    pub fees: Option<Decimal>,
    #[sea_orm(column_type = "Decimal(Some((10, 2)))", nullable)]
    pub accrued_interest: Option<Decimal>,
    #[sea_orm(column_type = "Decimal(Some((10, 2)))", nullable)]
    pub amount: Option<Decimal>,
    pub settlement_date: Option<Date>,
    pub source_file_id: Option<i32>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::account_history_source_file::Entity",
        from = "Column::SourceFileId",
        to = "super::account_history_source_file::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    AccountHistorySourceFile,
}

impl Related<super::account_history_source_file::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AccountHistorySourceFile.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
